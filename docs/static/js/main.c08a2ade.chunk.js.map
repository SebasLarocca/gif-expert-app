{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","categorie","ReactDOM","render","document","getElementById"],"mappings":"oMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OACI,sBAAMC,SAPW,SAACC,GAElBA,EAAEC,iBACFN,GAAe,SAACO,GAAD,OAAUL,GAAV,mBAAyBK,QAIxC,SACI,uBACIC,KAAO,OACPC,MAAUP,EACVQ,SAhBc,SAACL,GAEvBF,EAAcE,EAAEM,OAAOF,a,8BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAWH,GAH9C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GACpB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXrB,kBAeZM,GAfY,4CAAH,sDCDPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAIrC,OAFAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAGpB,sBAAKgB,UAAU,yCAAf,UAEI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAKA,QCFJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECLb,SAAEA,GAAe,IAAD,EAEdZ,mBAAS,CAC/BmB,KAAK,GACLe,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAcxC,OAPAC,qBAAW,WACP1B,EAASC,GAAW0B,MAAK,SAAAC,GAAI,OAAKH,EAAS,CACvCjB,KAAMoB,EACNL,SAAS,SAEd,CAAEtB,IAEEuB,EDA2BK,CAAc5B,GAAlCa,EATuB,EAS7BN,KAAce,EATe,EASfA,QAEtB,OAEI,qCACA,6BAAMtB,IAEJsB,EAAS,mBAAGJ,UAAU,oBAAb,yBAAoD,KAE/D,qBAAKA,UAAU,YAAf,SAISL,EAAOJ,KAAK,SAAAC,GAAG,OAAI,wBAAC,EAAD,2BAAiBA,GAAjB,IAAsBmB,IAAKnB,EAAIC,eEIpDmB,EA9BM,WAAK,IAAD,EAEe1C,mBAAS,CAAC,KAFzB,mBAEd2C,EAFc,KAEF5C,EAFE,KASrB,OACI,qCACA,oBAAI+B,UAAU,sCAAd,4BACA,cAAC,EAAD,CAAa/B,cAAgBA,IAC7B,uBAEA,6BAIQ4C,EAAWtB,KAAM,SAAAuB,GAAS,OACtB,cAAC,EAAD,CAEIhC,SAAagC,GADLA,Y,MCnBhCC,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c08a2ade.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e)=>{\r\n    \r\n        setInputValue(e.target.value)\r\n    }\r\n    \r\n    const handleSubmit = (e)=>{\r\n        // el prevent default a continuación es para que, cada vez que presionamos enter, lo cual provoca un submit, no refresque el navegador\r\n        e.preventDefault();\r\n        setCategories( (cats)=> [inputValue, ...cats ]);\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit = {handleSubmit}>            \r\n            <input \r\n                type = 'text'\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGifs = async( category )=>{\r\n        \r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=FItNIAousbGnfyYB1V9uryLexUqJIty6`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n       return {\r\n           id: img.id,\r\n           title: img.title,\r\n           url: img.images.downsized_medium.url\r\n       } \r\n    } );\r\n    \r\n    return gifs;\r\n\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n\r\n    console.log({id, title, url});\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn' >\r\n        \r\n            <img src={url} alt={title} ></img>\r\n            <p>{ title }</p>\r\n            \r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { getGifs } from './helpers/getGifs';\r\n\r\n\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // el use effect, con el segundo argumento como un arreglo vacio, lo quehace es que no renderice de nuevo todo el componente cada vez que se llama a la funcion\r\n    // useEffect( ()=>{\r\n    //     getGifs( category ).then( imgs => setImages( imgs ) )\r\n    // }, [ category ] );\r\n    \r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n\r\n        <>\r\n        <h3>{ category }</h3>\r\n        \r\n        { loading? <p className='animate__rotateIn' >Cargando...</p> : null }\r\n\r\n        <div className='card-grid' >\r\n            {/* <ol> */}\r\n            \r\n             {/* {images.map( (img) =>{ return <li key={img.id}>{img.title}<br></br><img src={img.url}></img><br></br></li>  } )} */}\r\n                {images.map( img => <GifGridItem {...img} key={img.id} />  )}     \r\n                   \r\n            {/* </ol> */}\r\n        </div>\r\n        </>\r\n    )\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../components/helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=>{\r\n        getGifs( category ).then(imgs =>  setState({\r\n            data: imgs,\r\n            loading: false\r\n        }) )\r\n    }, [ category ] );\r\n    \r\n    return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState([''])\r\n\r\n    // // para agegar un elemento al arreglo, funciona con ...categorias, no con push\r\n    // const handleAdd = ()=>{\r\n    //     setCategories( [...categories, 'Hulk' ])\r\n    // };\r\n\r\n    return (\r\n        <>\r\n        <h2 className='animate__animated animate__bounceIn' >Gif Expert App</h2>\r\n        <AddCategory setCategories={ setCategories } />\r\n        <br/>\r\n        \r\n        <ul>\r\n            {/* acá no usa el for por que no es un metodo que retorne algo, y lo que necesito es eso, un return, que en este map queda implísito */}\r\n            {/* el key = {categorie} es por que en base al key, react va a identificar el elemento */}\r\n            {\r\n                categories.map(  categorie  => \r\n                    <GifGrid \r\n                        key = { categorie }\r\n                        category = { categorie }/> )    \r\n            }\r\n            \r\n        </ul>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}